单例模式的写法
1、饿汉式（静态常量）[可用]
复制代码
public class Singleton {

    private final static Singleton INSTANCE = new Singleton();

    private Singleton(){}

    public static Singleton getInstance(){
        return INSTANCE;
    }
}
复制代码
优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。

缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。

2、饿汉式（静态代码块）[可用]
复制代码
public class Singleton {

    private static Singleton instance;

    static {
        instance = new Singleton();
    }

    private Singleton() {}

    public Singleton getInstance() {
        return instance;
    }
}


java常用的类：BufferedReader BufferedWriter ，FileReader FileWirter ，String Integer java.util.Date， Class， HashMap

java常用的接口：List ，Map ，Document ，NodeList ，Servlet,  HttpServletResponse, 
              Transaction(Hibernate)、 Session(Hibernate), HttpSession

java常用的包：java.lang ，java.io ，java.util ，java.sql ，javax.servlet ，
             org.apache.strtuts.action ，org.hibernate

1、final修饰符（关键字）。被final修饰的类，就意味着不能再派生出新的子类，不能作为父类而被子类继承。
                       因此一个类不能既被abstract声明，又被final声明。将变量或方法声明为final，
                       可以保证他们在使用的过程中不被修改。被声明为final的变量必须在声明时给出变量的初始值，
                       而在以后的引用中只能读取。被final声明的方法也同样只能使用，即不能方法重写。


2、finally:是在异常处理时提供finally块来执行任何清除操作。不管有没有异常被抛出、捕获，
          finally块都会被执行。try块中的内容是在无异常时执行到结束。catch块中的内容，
          是在try块内容发生catch所声明的异常时，跳转到catch块中执行。
          finally块则是无论异常是否发生，都会执行finally块的内容，
          所以在代码逻辑中有需要无论发生什么都必须执行的代码，就可以放在finally块中。

3、finalize是方法名。java技术允许使用finalize（）方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。
                    这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。
                    它是在object类中定义的，因此所有的类都继承了它。
                    子类覆盖finalize（）方法以整理系统资源或者被执行其他清理工作。
                    finalize（）方法是在垃圾收集器删除对象之前对这个对象调用的。 
                    
1、使用了jdk8一下的版本的string的substring方法会存在内存泄漏，
原因是substring方法内部实现是在原数据上进行截取的，
会一直引用字符串，如果字符串过长那么就会占用比较多的内存，
但是jdk8后对这个方法进行了改进，方法实现上首先是对这个字符串进行了拷贝，
然后再去截取，这样就释放了原字符串的内存。

2、在使用完hashmap list 等集合后尽量使用clear方法进行释放，否则他会一直在占用内存，知道垃圾回收。

3、session的保存数据后使用完成后应该及时清理，
否则他会一直保持到session失效

